diff --git a/src/ngx_http_headers_more_filter_module.c b/src/ngx_http_headers_more_filter_module.c
index 0bb6fec..5459813 100644
--- a/src/ngx_http_headers_more_filter_module.c
+++ b/src/ngx_http_headers_more_filter_module.c
@@ -118,6 +118,7 @@ ngx_http_headers_more_filter(ngx_http_request_t *r)
     ngx_uint_t                           i;
     ngx_http_headers_more_loc_conf_t    *conf;
     ngx_http_headers_more_cmd_t         *cmd;
+    ngx_str_t                            val;
 
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                    "headers more header filter, uri \"%V\"", &r->uri);
@@ -131,6 +132,23 @@ ngx_http_headers_more_filter(ngx_http_request_t *r)
                 continue;
             }
 
+            if (cmd[i].filter) {
+                if (ngx_http_complex_value(r, cmd[i].filter, &val) != NGX_OK) {
+                    return NGX_ERROR;
+                }
+    
+                if (val.len == 0 || (val.len == 1 && val.data[0] == '0')) {
+                    if (!cmd[i].negative) {
+                        continue;
+                    }
+
+                } else {
+                    if (cmd[i].negative) {
+                        continue;
+                    }
+                }
+            }
+
             rc = ngx_http_headers_more_exec_cmd(r, &cmd[i]);
 
             if (rc != NGX_OK) {
@@ -263,6 +281,7 @@ ngx_http_headers_more_handler(ngx_http_request_t *r)
     ngx_http_headers_more_loc_conf_t    *conf;
     ngx_http_headers_more_main_conf_t   *hmcf;
     ngx_http_headers_more_cmd_t         *cmd;
+    ngx_str_t                            val;
 
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                    "headers more rewrite handler, uri \"%V\"", &r->uri);
@@ -316,6 +335,23 @@ ngx_http_headers_more_handler(ngx_http_request_t *r)
                 continue;
             }
 
+            if (cmd[i].filter) {
+                if (ngx_http_complex_value(r, cmd[i].filter, &val) != NGX_OK) {
+                    return NGX_ERROR;
+                }
+
+                if (val.len == 0 || (val.len == 1 && val.data[0] == '0')) {
+                    if (!cmd[i].negative) {
+                        continue;
+                    }
+
+                } else {
+                    if (cmd[i].negative) {
+                        continue;
+                    }
+                }
+            }
+
             rc = ngx_http_headers_more_exec_input_cmd(r, &cmd[i]);
 
             if (rc != NGX_OK) {
diff --git a/src/ngx_http_headers_more_filter_module.h b/src/ngx_http_headers_more_filter_module.h
index 5f31ab4..1e2b5d5 100644
--- a/src/ngx_http_headers_more_filter_module.h
+++ b/src/ngx_http_headers_more_filter_module.h
@@ -24,6 +24,8 @@ typedef struct {
     ngx_array_t                       *statuses; /* of ngx_uint_t */
     ngx_array_t                       *headers; /* of ngx_http_header_val_t */
     ngx_flag_t                         is_input;
+    ngx_http_complex_value_t          *filter;
+    ngx_int_t                          negative;
 } ngx_http_headers_more_cmd_t;
 
 
diff --git a/src/ngx_http_headers_more_headers_in.c b/src/ngx_http_headers_more_headers_in.c
index 983be5b..a568184 100644
--- a/src/ngx_http_headers_more_headers_in.c
+++ b/src/ngx_http_headers_more_headers_in.c
@@ -532,6 +532,9 @@ ngx_http_headers_more_parse_directive(ngx_conf_t *cf, ngx_command_t *ngx_cmd,
     ngx_int_t                           rc;
     ngx_flag_t                          replace = 0;
     ngx_http_headers_more_header_val_t *h;
+    ngx_uint_t                          last;
+    ngx_str_t                           s;
+    ngx_http_compile_complex_value_t    ccv;
 
     ngx_http_headers_more_main_conf_t  *hmcf;
 
@@ -565,12 +568,46 @@ ngx_http_headers_more_parse_directive(ngx_conf_t *cf, ngx_command_t *ngx_cmd,
     cmd->statuses = NULL;
 
     arg = cf->args->elts;
+    last = cf->args->nelts - 1;
 
     cmd_name = &arg[0];
 
+    if ((arg[last].len > 3 && ngx_strncmp(arg[last].data, "if=", 3) == 0)
+        || (arg[last].len > 4 && ngx_strncmp(arg[last].data, "if!=", 4) == 0)) {
+
+        if (ngx_strncmp(arg[last].data, "if=", 3) == 0) {
+            s.len = arg[last].len - 3;
+            s.data = arg[last].data + 3;
+            cmd->negative = 0;
+
+        } else {
+            s.len = arg[last].len - 4;
+            s.data = arg[last].data + 4;
+            cmd->negative = 1;
+        }
+
+        ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+
+        ccv.cf = cf;
+        ccv.value = &s;
+        ccv.complex_value = ngx_palloc(cf->pool,
+                                    sizeof(ngx_http_complex_value_t));
+        if (ccv.complex_value == NULL) {
+            return NGX_CONF_ERROR;
+        }
+
+        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+            return NGX_CONF_ERROR;
+        }
+
+        cmd->filter = ccv.complex_value;
+
+        last--;
+    }
+
     ignore_next_arg = 0;
 
-    for (i = 1; i < cf->args->nelts; i++) {
+    for (i = 1; i < last + 1; i++) {
         if (ignore_next_arg) {
             ignore_next_arg = 0;
             continue;
diff --git a/src/ngx_http_headers_more_headers_out.c b/src/ngx_http_headers_more_headers_out.c
index 2a95b5f..625be0e 100644
--- a/src/ngx_http_headers_more_headers_out.c
+++ b/src/ngx_http_headers_more_headers_out.c
@@ -624,6 +624,9 @@ ngx_http_headers_more_parse_directive(ngx_conf_t *cf, ngx_command_t *ngx_cmd,
     ngx_flag_t                          is_builtin_header = 0;
     ngx_http_headers_more_header_val_t *h;
     ngx_http_headers_more_set_header_t *handlers;
+    ngx_uint_t                          last;
+    ngx_str_t                           s;
+    ngx_http_compile_complex_value_t    ccv;
 
     ngx_http_headers_more_main_conf_t  *hmcf;
 
@@ -659,12 +662,46 @@ ngx_http_headers_more_parse_directive(ngx_conf_t *cf, ngx_command_t *ngx_cmd,
     }
 
     arg = cf->args->elts;
+    last = cf->args->nelts - 1;
 
     cmd_name = &arg[0];
 
+    if ((arg[last].len > 3 && ngx_strncmp(arg[last].data, "if=", 3) == 0)
+        || (arg[last].len > 4 && ngx_strncmp(arg[last].data, "if!=", 4) == 0)) {
+
+        if (ngx_strncmp(arg[last].data, "if=", 3) == 0) {
+            s.len = arg[last].len - 3;
+            s.data = arg[last].data + 3;
+            cmd->negative = 0;
+
+        } else {
+            s.len = arg[last].len - 4;
+            s.data = arg[last].data + 4;
+            cmd->negative = 1;
+        }
+
+        ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
+
+        ccv.cf = cf;
+        ccv.value = &s;
+        ccv.complex_value = ngx_palloc(cf->pool,
+                                    sizeof(ngx_http_complex_value_t));
+        if (ccv.complex_value == NULL) {
+            return NGX_CONF_ERROR;
+        }
+
+        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
+            return NGX_CONF_ERROR;
+        }
+
+        cmd->filter = ccv.complex_value;
+
+        last--;
+    }
+
     ignore_next_arg = 0;
 
-    for (i = 1; i < cf->args->nelts; i++) {
+    for (i = 1; i < last + 1; i++) {
 
         if (ignore_next_arg) {
             ignore_next_arg = 0;
