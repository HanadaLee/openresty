diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index 013b715..0c3c6da 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -104,6 +104,9 @@ ngx_http_header_t  ngx_http_headers_in[] = {
                  offsetof(ngx_http_headers_in_t, if_none_match),
                  ngx_http_process_unique_header_line },
 
+    { ngx_string("X-Ocs-Request-Id"), offsetof(ngx_http_headers_in_t, x_ocs_request_id),
+                 ngx_http_process_unique_header_line },
+
     { ngx_string("User-Agent"), offsetof(ngx_http_headers_in_t, user_agent),
                  ngx_http_process_user_agent },
 
@@ -3809,6 +3812,29 @@ ngx_http_log_error(ngx_log_t *log, u_char *buf, size_t len)
     r = ctx->request;
 
     if (r) {
+        ngx_str_t                    text;
+        u_char                      *p2, *lowcase;
+        size_t                       len2 = 14;
+        ngx_str_t                    name;
+        ngx_http_variable_value_t   *vv;
+        ngx_uint_t                   hash;
+        p2 = (u_char *) "ocs_request_id";
+        lowcase = ngx_pnalloc(r->pool, len2);
+        if (lowcase == NULL) {
+            return r->log_handler(r, ctx->current_request, p, len);
+        }
+        hash = ngx_hash_strlow(lowcase, p2, len2);
+        name.len = len2;
+        name.data = lowcase;
+        vv = ngx_http_get_variable(r, &name, hash);
+        if (!vv->not_found) {
+            text.data = vv->data;
+            text.len = vv->len;
+        	buf = p;
+        	p = ngx_snprintf(buf, len, ", request_id: %V", &text);
+            len -= p - buf;
+        }
+
         return r->log_handler(r, ctx->current_request, p, len);
 
     } else {
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index b1269d2..daf37cc 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -188,6 +188,7 @@ typedef struct {
     ngx_table_elt_t                  *if_unmodified_since;
     ngx_table_elt_t                  *if_match;
     ngx_table_elt_t                  *if_none_match;
+    ngx_table_elt_t                  *x_ocs_request_id;
     ngx_table_elt_t                  *user_agent;
     ngx_table_elt_t                  *referer;
     ngx_table_elt_t                  *content_length;
diff --git a/src/http/ngx_http_variables.c b/src/http/ngx_http_variables.c
index 942dacd..3d95723 100644
--- a/src/http/ngx_http_variables.c
+++ b/src/http/ngx_http_variables.c
@@ -105,6 +105,8 @@ static ngx_int_t ngx_http_variable_request_time(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 static ngx_int_t ngx_http_variable_request_id(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
+static ngx_int_t ngx_http_variable_ocs_request_id(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
 static ngx_int_t ngx_http_variable_status(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 
@@ -302,6 +304,10 @@ static ngx_http_variable_t  ngx_http_core_variables[] = {
       ngx_http_variable_request_id,
       0, 0, 0 },
 
+    { ngx_string("ocs_request_id"), NULL,
+      ngx_http_variable_ocs_request_id,
+      0, 0, 0 },
+
     { ngx_string("status"), NULL,
       ngx_http_variable_status, 0,
       NGX_HTTP_VAR_NOCACHEABLE, 0 },
@@ -2219,6 +2225,57 @@ ngx_http_variable_request_id(ngx_http_request_t *r,
 }
 
 
+static ngx_int_t
+ngx_http_variable_ocs_request_id(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    u_char      *id, *p;
+    ngx_time_t  *tp;
+
+#if (NGX_OPENSSL)
+    u_char       random_bytes[4];
+#endif
+
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+
+    if (r->headers_in.x_ocs_request_id) {
+        v->len = r->headers_in.x_ocs_request_id->value.len;
+        v->data = r->headers_in.x_ocs_request_id->value.data;
+        return NGX_OK;
+    }
+
+    tp = ngx_timeofday();
+    id = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + ngx_cycle->hostname.len + 10);
+    if (id == NULL) {
+        return NGX_ERROR;
+    }
+
+    p = ngx_sprintf(id, "%xT_%*s_", tp->sec, ngx_cycle->hostname.len, ngx_cycle->hostname.data);
+
+#if (NGX_OPENSSL)
+
+    if (RAND_bytes(random_bytes, 4) == 1) {
+        p = ngx_hex_dump(p, random_bytes, 4);
+        v->len = p - id;
+        v->data = id;
+        return NGX_OK;
+    }
+
+    ngx_ssl_error(NGX_LOG_ERR, r->connection->log, 0, "RAND_bytes() failed");
+
+#endif
+
+    p = ngx_sprintf(p, "%08xD", (uint32_t) ngx_random());
+
+    v->len = p - id;
+    v->data = id;
+
+    return NGX_OK;
+}
+
+
 static ngx_int_t
 ngx_http_variable_connection(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data)
