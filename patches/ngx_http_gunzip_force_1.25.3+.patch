diff --git a/src/http/modules/ngx_http_gunzip_filter_module.c b/src/http/modules/ngx_http_gunzip_filter_module.c
index c1341f5..1697e33 100644
--- a/src/http/modules/ngx_http_gunzip_filter_module.c
+++ b/src/http/modules/ngx_http_gunzip_filter_module.c
@@ -15,6 +15,7 @@
 
 typedef struct {
     ngx_flag_t           enable;
+    ngx_array_t         *force;
     ngx_bufs_t           bufs;
 } ngx_http_gunzip_conf_t;
 
@@ -71,6 +72,13 @@ static ngx_command_t  ngx_http_gunzip_filter_commands[] = {
       offsetof(ngx_http_gunzip_conf_t, enable),
       NULL },
 
+    { ngx_string("gunzip_force"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_1MORE,
+      ngx_http_set_predicate_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_gunzip_conf_t, force),
+      NULL },
+
     { ngx_string("gunzip_buffers"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_TAKE2,
       ngx_conf_set_bufs_slot,
@@ -126,7 +134,6 @@ ngx_http_gunzip_header_filter(ngx_http_request_t *r)
     conf = ngx_http_get_module_loc_conf(r, ngx_http_gunzip_filter_module);
 
     /* TODO support multiple content-codings */
-    /* TODO always gunzip - due to configuration or module request */
     /* TODO ignore content encoding? */
 
     if (!conf->enable
@@ -138,15 +145,26 @@ ngx_http_gunzip_header_filter(ngx_http_request_t *r)
         return ngx_http_next_header_filter(r);
     }
 
-    r->gzip_vary = 1;
+    switch (ngx_http_test_predicates(r, conf->force)) {
+
+    case NGX_ERROR:
+        return NGX_ERROR;
+
+    case NGX_OK:
+        r->gzip_vary = 1;
 
-    if (!r->gzip_tested) {
-        if (ngx_http_gzip_ok(r) == NGX_OK) {
+        if (!r->gzip_tested) {
+            if (ngx_http_gzip_ok(r) == NGX_OK) {
+                return ngx_http_next_header_filter(r);
+            }
+
+        } else if (r->gzip_ok) {
             return ngx_http_next_header_filter(r);
         }
+        break;
 
-    } else if (r->gzip_ok) {
-        return ngx_http_next_header_filter(r);
+    default: /* NGX_DECLINED */
+        break;
     }
 
     ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_gunzip_ctx_t));
@@ -654,6 +672,7 @@ ngx_http_gunzip_create_conf(ngx_conf_t *cf)
      */
 
     conf->enable = NGX_CONF_UNSET;
+    conf->force  = NGX_CONF_UNSET_PTR;
 
     return conf;
 }
@@ -666,6 +685,7 @@ ngx_http_gunzip_merge_conf(ngx_conf_t *cf, void *parent, void *child)
     ngx_http_gunzip_conf_t *conf = child;
 
     ngx_conf_merge_value(conf->enable, prev->enable, 0);
+    ngx_conf_merge_ptr_value(conf->force, prev->force, NULL);
 
     ngx_conf_merge_bufs_value(conf->bufs, prev->bufs,
                               (128 * 1024) / ngx_pagesize, ngx_pagesize);
